type Query {
  userList: [User]
  userClientCtx: UserClientCtx
}

type Mutation {
  createUser(values: UserInput): String
  updateUsersNameEmail(name: String!, email: String!): User
}

type User {
  userId: UUID!
  firebaseUid: String!
  name: String!
  email: EmailAddress!
  policiesAgreed: Boolean # PoliciesPayload
  createdAt: DateTime
  updatedAt: DateTime
  archivedAt: DateTime
  deletedAt: DateTime
}

input UserInput {
  firebaseUid: String!
  name: String!
  email: EmailAddress!
  policiesAgreed: Boolean # PoliciesPayload
}

type UserClientCtx {
  name: String!
  firebaseUid: String!
  userId: String!
  email: EmailAddress!
  tenantId: String!
  userTenantRoleSlug: UserTenantRoleSlugs!
  brands: [UserBrands]
}

type UserBrands {
  brandId: String!
  subscriptionPeriodEnds: PositiveInt
  tenantBrandRoleSlug: TenantBrandRoleSlugs!
}

type UserNameEmail {
  name: String!
  email: String!
}

type PoliciesPayload {
  version: String!
  timestamp: DateTime!
}

enum UserTenantRoleSlugs {
  admin
  editor
  user
}

type UserTenantRoles {
  userTenantRoleSlug: UserTenantRoleSlugs
  displayName: String
  createdAt: DateTime
  updatedAt: DateTime
  archivedAt: DateTime
  deletedAt: DateTime
}
